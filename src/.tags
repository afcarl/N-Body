!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BEGIN	include/NBody.hh	/^enum { FINISH, DATA, BEGIN, EXIT, QUIT};$/;"	e	enum:__anon1
BORDER_COLLISION_FACTOR	include/common.hh	16;"	d
Bcast	include/NBody.hh	69;"	d
Bcast_d	include/NBody.hh	74;"	d
Body	include/Body.hh	/^		Body(){};$/;"	f	class:Body	access:public	signature:()
Body	include/Body.hh	/^		Body(real_t m_r){$/;"	f	class:Body	access:public	signature:(real_t m_r)
Body	include/Body.hh	/^class Body {$/;"	c
Body::Body	include/Body.hh	/^		Body(){};$/;"	f	class:Body	access:public	signature:()
Body::Body	include/Body.hh	/^		Body(real_t m_r){$/;"	f	class:Body	access:public	signature:(real_t m_r)
Body::b	include/Body.hh	/^		double rr, g, b;$/;"	m	class:Body	access:public
Body::cal_vel	Body.cc	/^void Body::cal_vel(const Body &b, const real_t dt){$/;"	f	class:Body	signature:(const Body &b, const real_t dt)
Body::cal_vel	include/Body.hh	/^		void cal_vel(const Body& b, const real_t dt);$/;"	p	class:Body	access:public	signature:(const Body& b, const real_t dt)
Body::col_vel	Body.cc	/^void Body::col_vel(const Body& b){$/;"	f	class:Body	signature:(const Body& b)
Body::col_vel	include/Body.hh	/^		void col_vel(const Body& b);$/;"	p	class:Body	access:public	signature:(const Body& b)
Body::g	include/Body.hh	/^		double rr, g, b;$/;"	m	class:Body	access:public
Body::index	include/Body.hh	/^		int index;$/;"	m	class:Body	access:public
Body::judge_border	Body.cc	/^void Body::judge_border(real_t dt){$/;"	f	class:Body	signature:(real_t dt)
Body::judge_border	include/Body.hh	/^		void judge_border(const real_t dt);$/;"	p	class:Body	access:public	signature:(const real_t dt)
Body::m	include/Body.hh	/^		real_t r,m;$/;"	m	class:Body	access:public
Body::move	Body.cc	/^void Body::move(real_t dt){$/;"	f	class:Body	signature:(real_t dt)
Body::move	include/Body.hh	/^		void move(real_t dt);$/;"	p	class:Body	access:public	signature:(real_t dt)
Body::pos	include/Body.hh	/^		Vec pos, v;$/;"	m	class:Body	access:public
Body::r	include/Body.hh	/^		real_t r,m;$/;"	m	class:Body	access:public
Body::random_init	Body.cc	/^void Body::random_init(){$/;"	f	class:Body	signature:()
Body::random_init	include/Body.hh	/^		void random_init();$/;"	p	class:Body	access:public	signature:()
Body::rr	include/Body.hh	/^		double rr, g, b;$/;"	m	class:Body	access:public
Body::set_r	include/Body.hh	/^		void set_r(real_t m_r){$/;"	f	class:Body	access:public	signature:(real_t m_r)
Body::v	include/Body.hh	/^		Vec pos, v;$/;"	m	class:Body	access:public
COLLISION_FACTOR	include/common.hh	15;"	d
COLL_WORK	NBody_Parallel.cc	10;"	d	file:
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -Wextra $(INCLUDE_DIR) $(DEFINES)  -fopenmp -O3 $/;"	m
CXXSOURCES	Makefile	/^CXXSOURCES = $(shell find -name "*.cc" | sed 's\/^\\.\\\/\/\/g')$/;"	m
DATA	include/NBody.hh	/^enum { FINISH, DATA, BEGIN, EXIT, QUIT};$/;"	e	enum:__anon1
DEPFILES	Makefile	/^DEPFILES = $(OBJS:.o=.d)$/;"	m
EPS	include/common.hh	14;"	d
EXIT	include/NBody.hh	/^enum { FINISH, DATA, BEGIN, EXIT, QUIT};$/;"	e	enum:__anon1
FINISH	include/NBody.hh	/^enum { FINISH, DATA, BEGIN, EXIT, QUIT};$/;"	e	enum:__anon1
FPS	main.cc	/^	FPS = 35,$/;"	v
GRAVITY	include/common.hh	13;"	d
INCLUDE_DIR	Makefile	/^INCLUDE_DIR = -Iinclude $/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $(shell pkg-config --cflags --libs gtk+-2.0) -fopenmp $/;"	m
MAXN	include/NBody.hh	/^		int MAXN;$/;"	m	class:NBody	access:public
MAXN	main.cc	/^	MAXN = 25;$/;"	v
NBody	include/NBody.hh	/^		NBody(){};$/;"	f	class:NBody	access:public	signature:()
NBody	include/NBody.hh	/^		NBody(int n, real_t m_dt){$/;"	f	class:NBody	access:public	signature:(int n, real_t m_dt)
NBody	include/NBody.hh	/^class NBody {$/;"	c
NBody::MAXN	include/NBody.hh	/^		int MAXN;$/;"	m	class:NBody	access:public
NBody::NBody	include/NBody.hh	/^		NBody(){};$/;"	f	class:NBody	access:public	signature:()
NBody::NBody	include/NBody.hh	/^		NBody(int n, real_t m_dt){$/;"	f	class:NBody	access:public	signature:(int n, real_t m_dt)
NBody::b	include/NBody.hh	/^		Body* b;$/;"	m	class:NBody	access:public
NBody::collision_change	NBody.cc	/^void NBody::collision_change(int target){$/;"	f	class:NBody	signature:(int target)
NBody::collision_change	include/NBody.hh	/^		void collision_change(int target);$/;"	p	class:NBody	access:private	signature:(int target)
NBody::dt	include/NBody.hh	/^		real_t dt;$/;"	m	class:NBody	access:public
NBody::get_body	NBody.cc	/^Body& NBody::get_body(Vec pos){$/;"	f	class:NBody	signature:(Vec pos)
NBody::get_body	include/NBody.hh	/^		Body& get_body(Vec pos);$/;"	p	class:NBody	access:public	signature:(Vec pos)
NBody::go_steps	NBody.cc	/^void NBody::go_steps(int n){$/;"	f	class:NBody	signature:(int n)
NBody::go_steps	include/NBody.hh	/^		void go_steps(int n);$/;"	p	class:NBody	access:public	signature:(int n)
NBody::init	NBody.cc	/^void NBody::init(){$/;"	f	class:NBody	signature:()
NBody::init	include/NBody.hh	/^		void init();$/;"	p	class:NBody	access:public	signature:()
NBody::make_circle	NBody.cc	/^void NBody::make_circle(real_t R, int start, int end){$/;"	f	class:NBody	signature:(real_t R, int start, int end)
NBody::make_circle	include/NBody.hh	/^		void make_circle(real_t r, int start, int end);$/;"	p	class:NBody	access:private	signature:(real_t r, int start, int end)
NBody::mpi_master	NBody_Parallel.cc	/^void NBody::mpi_master(){$/;"	f	class:NBody	signature:()
NBody::mpi_master	include/NBody.hh	/^		void mpi_master();$/;"	p	class:NBody	access:private	signature:()
NBody::mpi_master_do	NBody_Parallel.cc	/^void NBody::mpi_master_do(int tag){$/;"	f	class:NBody	signature:(int tag)
NBody::mpi_master_do	include/NBody.hh	/^		void mpi_master_do(int tag);$/;"	p	class:NBody	access:private	signature:(int tag)
NBody::mpi_slave	NBody_Parallel.cc	/^void NBody::mpi_slave(){$/;"	f	class:NBody	signature:()
NBody::mpi_slave	include/NBody.hh	/^		void mpi_slave();$/;"	p	class:NBody	access:public	signature:()
NBody::mpi_slave_do	NBody_Parallel.cc	/^bool NBody::mpi_slave_do(int tag){$/;"	f	class:NBody	signature:(int tag)
NBody::mpi_slave_do	include/NBody.hh	/^		bool mpi_slave_do(int tag);$/;"	p	class:NBody	access:public	signature:(int tag)
NBody::omp	NBody_Parallel.cc	/^void NBody::omp(){$/;"	f	class:NBody	signature:()
NBody::omp	include/NBody.hh	/^		void omp();$/;"	p	class:NBody	access:private	signature:()
NBody::pthread	NBody_Parallel.cc	/^void NBody::pthread(){$/;"	f	class:NBody	signature:()
NBody::pthread	include/NBody.hh	/^		void pthread();$/;"	p	class:NBody	access:private	signature:()
NBody::share_data	NBody_Parallel.cc	/^void NBody::share_data(){$/;"	f	class:NBody	signature:()
NBody::share_data	include/NBody.hh	/^		void share_data();$/;"	p	class:NBody	access:private	signature:()
NBody::step	NBody.cc	/^void NBody::step(){$/;"	f	class:NBody	signature:()
NBody::step	include/NBody.hh	/^		void step();$/;"	p	class:NBody	access:public	signature:()
NBody::thread_do	NBody_Parallel.cc	/^void NBody::thread_do(long myid){$/;"	f	class:NBody	signature:(long myid)
NBody::thread_do	include/NBody.hh	/^		void thread_do(long myid);$/;"	p	class:NBody	access:public	signature:(long myid)
NBody::vel_change	NBody.cc	/^void NBody::vel_change(int target){$/;"	f	class:NBody	signature:(int target)
NBody::vel_change	include/NBody.hh	/^		void vel_change(int target);$/;"	p	class:NBody	access:private	signature:(int target)
NBody::~NBody	include/NBody.hh	/^		~NBody(){};$/;"	f	class:NBody	access:public	signature:()
OBJS	Makefile	/^OBJS = $(addprefix $(OBJ_DIR)\/,$(CXXSOURCES:.cc=.o))$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = obj$/;"	m
QUIT	include/NBody.hh	/^enum { FINISH, DATA, BEGIN, EXIT, QUIT};$/;"	e	enum:__anon1
Recv	include/NBody.hh	67;"	d
Recv_d	include/NBody.hh	72;"	d
SIZE_X	main.cc	/^int SIZE_X = 1200,$/;"	v
SIZE_Y	main.cc	/^	SIZE_Y = 800,$/;"	v
Send	include/NBody.hh	68;"	d
Send_d	include/NBody.hh	73;"	d
TARGET	Makefile	/^TARGET = main$/;"	m
VEL_WORK	NBody_Parallel.cc	9;"	d	file:
Vec	include/common.hh	/^		Vec(){ };$/;"	f	class:Vec	access:public	signature:()
Vec	include/common.hh	/^		Vec(real_t m_x, real_t m_y):x(m_x),y(m_y){};$/;"	f	class:Vec	access:public	signature:(real_t m_x, real_t m_y)
Vec	include/common.hh	/^class Vec {$/;"	c
Vec::Vec	include/common.hh	/^		Vec(){ };$/;"	f	class:Vec	access:public	signature:()
Vec::Vec	include/common.hh	/^		Vec(real_t m_x, real_t m_y):x(m_x),y(m_y){};$/;"	f	class:Vec	access:public	signature:(real_t m_x, real_t m_y)
Vec::distsqr	include/common.hh	/^		real_t distsqr(const Vec v) const {$/;"	f	class:Vec	access:public	signature:(const Vec v) const
Vec::dot	include/common.hh	/^		real_t dot(const Vec v) const { \/\/ const$/;"	f	class:Vec	access:public	signature:(const Vec v) const
Vec::operator *	include/common.hh	/^		const Vec operator *(real_t f) const {$/;"	f	class:Vec	access:public	signature:(real_t f) const
Vec::operator *=	include/common.hh	/^		Vec& operator *= (real_t f){$/;"	f	class:Vec	access:public	signature:(real_t f)
Vec::operator +	include/common.hh	/^		const Vec operator +(const Vec &c) const {$/;"	f	class:Vec	access:public	signature:(const Vec &c) const
Vec::operator +=	include/common.hh	/^		Vec& operator += (const Vec &c){$/;"	f	class:Vec	access:public	signature:(const Vec &c)
Vec::operator -	include/common.hh	/^		const Vec operator -() const {$/;"	f	class:Vec	access:public	signature:() const
Vec::operator -	include/common.hh	/^		const Vec operator -(const Vec &c) const {$/;"	f	class:Vec	access:public	signature:(const Vec &c) const
Vec::operator -=	include/common.hh	/^		Vec& operator -= (const Vec &c){$/;"	f	class:Vec	access:public	signature:(const Vec &c)
Vec::operator /	include/common.hh	/^		const Vec operator \/(real_t f) const {$/;"	f	class:Vec	access:public	signature:(real_t f) const
Vec::operator <<	include/common.hh	/^		friend ostream& operator << (ostream&, const Vec&);$/;"	p	class:Vec	access:friend	signature:(ostream&, const Vec&)
Vec::operator =	include/common.hh	/^		Vec& operator = (const Vec& right_vec){$/;"	f	class:Vec	access:public	signature:(const Vec& right_vec)
Vec::operator >>	include/common.hh	/^		friend istream& operator >> (istream&, Vec&);$/;"	p	class:Vec	access:friend	signature:(istream&, Vec&)
Vec::sqr	include/common.hh	/^		real_t sqr() const {$/;"	f	class:Vec	access:public	signature:() const
Vec::x	include/common.hh	/^		real_t x,y;$/;"	m	class:Vec	access:public
Vec::y	include/common.hh	/^		real_t x,y;$/;"	m	class:Vec	access:public
__HEAD__BODY	include/Body.hh	6;"	d
__HEAD__COMMON	include/common.hh	6;"	d
__HEAD__GUI	include/Gui.hh	6;"	d
__HEAD__NBODY	include/NBody.hh	6;"	d
__HEAD__UTILS	include/utils.hh	6;"	d
_print_debug_	include/utils.hh	/^void _print_debug_(int line, int myid, const char* fmt, ...);$/;"	p	signature:(int line, int myid, const char* fmt, ...)
_print_debug_	utils.cc	/^void _print_debug_(int line, int myid, const char* fmt, ...){$/;"	f	signature:(int line, int myid, const char* fmt, ...)
all_pause	Gui.cc	/^bool all_pause = false;$/;"	v
b	include/Body.hh	/^		double rr, g, b;$/;"	m	class:Body	access:public
b	include/NBody.hh	/^		Body* b;$/;"	m	class:NBody	access:public
barrier	NBody_Parallel.cc	/^pthread_barrier_t barrier; $/;"	v
barrier_attr	NBody_Parallel.cc	/^pthread_barrierattr_t barrier_attr;$/;"	v
cal_vel	Body.cc	/^void Body::cal_vel(const Body &b, const real_t dt){$/;"	f	class:Body	signature:(const Body &b, const real_t dt)
cal_vel	include/Body.hh	/^		void cal_vel(const Body& b, const real_t dt);$/;"	p	class:Body	access:public	signature:(const Body& b, const real_t dt)
cal_vel_two	Body.cc	/^inline void cal_vel_two(Body& b1, const Body& b2, const real_t dt){$/;"	f	signature:(Body& b1, const Body& b2, const real_t dt)
cb_clicked	Gui.cc	/^gboolean cb_clicked(GtkWidget *, GdkEventButton *event, gpointer){$/;"	f	signature:(GtkWidget *, GdkEventButton *event, gpointer)
cb_clicked	include/Gui.hh	/^gboolean cb_clicked(GtkWidget *, GdkEventButton *event, gpointer);$/;"	p	signature:(GtkWidget *, GdkEventButton *event, gpointer)
cb_pressed	Gui.cc	/^gboolean cb_pressed(GtkWidget *, GdkEventKey *event, gpointer){$/;"	f	signature:(GtkWidget *, GdkEventKey *event, gpointer)
cb_pressed	include/Gui.hh	/^gboolean cb_pressed(GtkWidget *, GdkEventKey *event, gpointer);$/;"	p	signature:(GtkWidget *, GdkEventKey *event, gpointer)
cb_timeout	Gui.cc	/^gboolean cb_timeout(GtkWidget *widget) {$/;"	f	signature:(GtkWidget *widget)
cb_timeout	include/Gui.hh	/^gboolean cb_timeout(GtkWidget *widget);$/;"	p	signature:(GtkWidget *widget)
cc	Makefile	/^cc = mpicxx$/;"	m
col_time	Body.cc	/^real_t col_time(const Body &b1, const Body &b2, const real_t dt){   $/;"	f	signature:(const Body &b1, const Body &b2, const real_t dt)
col_time	include/Body.hh	/^real_t col_time(const Body &b1, const Body &b2, const real_t dt);$/;"	p	signature:(const Body &b1, const Body &b2, const real_t dt)
col_vel	Body.cc	/^void Body::col_vel(const Body& b){$/;"	f	class:Body	signature:(const Body& b)
col_vel	include/Body.hh	/^		void col_vel(const Body& b);$/;"	p	class:Body	access:public	signature:(const Body& b)
col_vel_two	Body.cc	/^inline void col_vel_two(Body &b1, const Body &b2){$/;"	f	signature:(Body &b1, const Body &b2)
col_vel_two	include/Body.hh	/^void col_vel_two(Body &b1, const Body &b2);$/;"	p	signature:(Body &b1, const Body &b2)
collision_change	NBody.cc	/^void NBody::collision_change(int target){$/;"	f	class:NBody	signature:(int target)
collision_change	include/NBody.hh	/^		void collision_change(int target);$/;"	p	class:NBody	access:private	signature:(int target)
da_expose_callback	Gui.cc	/^gboolean da_expose_callback( GtkWidget *widget, GdkEventExpose *, gpointer) {$/;"	f	signature:( GtkWidget *widget, GdkEventExpose *, gpointer)
da_expose_callback	include/Gui.hh	/^gboolean da_expose_callback( GtkWidget *widget, GdkEventExpose *, gpointer);$/;"	p	signature:( GtkWidget *widget, GdkEventExpose *, gpointer)
delete_event	Gui.cc	/^gboolean delete_event(GtkWidget *, GdkEvent *, gpointer) {$/;"	f	signature:(GtkWidget *, GdkEvent *, gpointer)
delete_event	include/Gui.hh	/^gboolean delete_event( GtkWidget *, GdkEvent *, gpointer);$/;"	p	signature:( GtkWidget *, GdkEvent *, gpointer)
destroy	Gui.cc	/^void destroy(GtkWidget *, gpointer) {$/;"	f	signature:(GtkWidget *, gpointer)
destroy	include/Gui.hh	/^void destroy(GtkWidget *, gpointer);$/;"	p	signature:(GtkWidget *, gpointer)
disp	main.cc	/^bool disp = true,$/;"	v
dist	Body.cc	/^inline real_t dist(const Body& b1, const Body& b2){$/;"	f	signature:(const Body& b1, const Body& b2)
distsqr	Body.cc	/^inline real_t distsqr(const Body& b1, const Body& b2){$/;"	f	signature:(const Body& b1, const Body& b2)
distsqr	include/common.hh	/^		real_t distsqr(const Vec v) const {$/;"	f	class:Vec	access:public	signature:(const Vec v) const
dot	include/common.hh	/^		real_t dot(const Vec v) const { \/\/ const$/;"	f	class:Vec	access:public	signature:(const Vec v) const
draw_all	Gui.cc	/^void draw_all(GtkWidget *widget){$/;"	f	signature:(GtkWidget *widget)
draw_all	include/Gui.hh	/^void draw_all(GtkWidget *widget);$/;"	p	signature:(GtkWidget *widget)
dt	include/NBody.hh	/^		real_t dt;$/;"	m	class:NBody	access:public
g	include/Body.hh	/^		double rr, g, b;$/;"	m	class:Body	access:public
get_body	NBody.cc	/^Body& NBody::get_body(Vec pos){$/;"	f	class:NBody	signature:(Vec pos)
get_body	include/NBody.hh	/^		Body& get_body(Vec pos);$/;"	p	class:NBody	access:public	signature:(Vec pos)
go_steps	NBody.cc	/^void NBody::go_steps(int n){$/;"	f	class:NBody	signature:(int n)
go_steps	include/NBody.hh	/^		void go_steps(int n);$/;"	p	class:NBody	access:public	signature:(int n)
gui_quit	Gui.cc	/^void gui_quit(){$/;"	f	signature:()
gui_quit	include/Gui.hh	/^void gui_quit();$/;"	p	signature:()
index	include/Body.hh	/^		int index;$/;"	m	class:Body	access:public
init	NBody.cc	/^void NBody::init(){$/;"	f	class:NBody	signature:()
init	include/NBody.hh	/^		void init();$/;"	p	class:NBody	access:public	signature:()
judge_border	Body.cc	/^void Body::judge_border(real_t dt){$/;"	f	class:Body	signature:(real_t dt)
judge_border	include/Body.hh	/^		void judge_border(const real_t dt);$/;"	p	class:Body	access:public	signature:(const real_t dt)
m	include/Body.hh	/^		real_t r,m;$/;"	m	class:Body	access:public
main	main.cc	/^int main(int argc, char* argv[]){$/;"	f	signature:(int argc, char* argv[])
make_circle	NBody.cc	/^void NBody::make_circle(real_t R, int start, int end){$/;"	f	class:NBody	signature:(real_t R, int start, int end)
make_circle	include/NBody.hh	/^		void make_circle(real_t r, int start, int end);$/;"	p	class:NBody	access:private	signature:(real_t r, int start, int end)
move	Body.cc	/^void Body::move(real_t dt){$/;"	f	class:Body	signature:(real_t dt)
move	include/Body.hh	/^		void move(real_t dt);$/;"	p	class:Body	access:public	signature:(real_t dt)
mpi_master	NBody_Parallel.cc	/^void NBody::mpi_master(){$/;"	f	class:NBody	signature:()
mpi_master	include/NBody.hh	/^		void mpi_master();$/;"	p	class:NBody	access:private	signature:()
mpi_master_do	NBody_Parallel.cc	/^void NBody::mpi_master_do(int tag){$/;"	f	class:NBody	signature:(int tag)
mpi_master_do	include/NBody.hh	/^		void mpi_master_do(int tag);$/;"	p	class:NBody	access:private	signature:(int tag)
mpi_slave	NBody_Parallel.cc	/^void NBody::mpi_slave(){$/;"	f	class:NBody	signature:()
mpi_slave	include/NBody.hh	/^		void mpi_slave();$/;"	p	class:NBody	access:public	signature:()
mpi_slave_do	NBody_Parallel.cc	/^bool NBody::mpi_slave_do(int tag){$/;"	f	class:NBody	signature:(int tag)
mpi_slave_do	include/NBody.hh	/^		bool mpi_slave_do(int tag);$/;"	p	class:NBody	access:public	signature:(int tag)
mpi_unit	NBody_Parallel.cc	/^int mpi_unit = 30;$/;"	v
myid	main.cc	/^int myid, nproc;$/;"	v
now_mutex	NBody_Parallel.cc	/^pthread_mutex_t now_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v
nowstep	Gui.cc	/^int nowstep = 0;$/;"	v
nproc	main.cc	/^int myid, nproc;$/;"	v
nstep	main.cc	/^int nstep = 0;$/;"	v
omp	NBody_Parallel.cc	/^void NBody::omp(){$/;"	f	class:NBody	signature:()
omp	include/NBody.hh	/^		void omp();$/;"	p	class:NBody	access:private	signature:()
operator *	common.cc	/^Vec operator * (real_t f, const Vec& vec){$/;"	f	signature:(real_t f, const Vec& vec)
operator *	include/common.hh	/^		const Vec operator *(real_t f) const {$/;"	f	class:Vec	access:public	signature:(real_t f) const
operator *	include/common.hh	/^Vec operator * (real_t f, const Vec& vec);$/;"	p	signature:(real_t f, const Vec& vec)
operator *=	include/common.hh	/^		Vec& operator *= (real_t f){$/;"	f	class:Vec	access:public	signature:(real_t f)
operator +	include/common.hh	/^		const Vec operator +(const Vec &c) const {$/;"	f	class:Vec	access:public	signature:(const Vec &c) const
operator +=	include/common.hh	/^		Vec& operator += (const Vec &c){$/;"	f	class:Vec	access:public	signature:(const Vec &c)
operator -	include/common.hh	/^		const Vec operator -() const {$/;"	f	class:Vec	access:public	signature:() const
operator -	include/common.hh	/^		const Vec operator -(const Vec &c) const {$/;"	f	class:Vec	access:public	signature:(const Vec &c) const
operator -=	include/common.hh	/^		Vec& operator -= (const Vec &c){$/;"	f	class:Vec	access:public	signature:(const Vec &c)
operator /	include/common.hh	/^		const Vec operator \/(real_t f) const {$/;"	f	class:Vec	access:public	signature:(real_t f) const
operator <<	common.cc	/^ostream& operator << (ostream& o, const Vec& vec){$/;"	f	signature:(ostream& o, const Vec& vec)
operator <<	include/common.hh	/^		friend ostream& operator << (ostream&, const Vec&);$/;"	p	class:Vec	access:friend	signature:(ostream&, const Vec&)
operator =	include/common.hh	/^		Vec& operator = (const Vec& right_vec){$/;"	f	class:Vec	access:public	signature:(const Vec& right_vec)
operator >>	common.cc	/^istream& operator >> (istream& in, Vec& vec){$/;"	f	signature:(istream& in, Vec& vec)
operator >>	include/common.hh	/^		friend istream& operator >> (istream&, Vec&);$/;"	p	class:Vec	access:friend	signature:(istream&, Vec&)
overlap	Body.cc	/^bool overlap(const Body &b1, const Body &b2){$/;"	f	signature:(const Body &b1, const Body &b2)
overlap	include/Body.hh	/^bool overlap(const Body &b1, const Body &b2);$/;"	p	signature:(const Body &b1, const Body &b2)
parse_args	include/utils.hh	/^void parse_args(int argc, char* argv[]);$/;"	p	signature:(int argc, char* argv[])
parse_args	utils.cc	/^void parse_args(int argc, char* argv[]){$/;"	f	signature:(int argc, char* argv[])
parse_error	include/utils.hh	26;"	d
pos	include/Body.hh	/^		Vec pos, v;$/;"	m	class:Body	access:public
print_debug	include/utils.hh	18;"	d
print_debug	include/utils.hh	21;"	d
print_help	include/utils.hh	/^void print_help();$/;"	p	signature:()
print_help	utils.cc	/^void print_help(){$/;"	f	signature:()
prog_name	utils.cc	/^char* prog_name;$/;"	v
pth_now	NBody_Parallel.cc	/^	pth_now;$/;"	v
pth_unit	NBody_Parallel.cc	/^int pth_unit = 10,$/;"	v
pthread	NBody_Parallel.cc	/^void NBody::pthread(){$/;"	f	class:NBody	signature:()
pthread	include/NBody.hh	/^		void pthread();$/;"	p	class:NBody	access:private	signature:()
r	include/Body.hh	/^		real_t r,m;$/;"	m	class:Body	access:public
random_init	Body.cc	/^void Body::random_init(){$/;"	f	class:Body	signature:()
random_init	include/Body.hh	/^		void random_init();$/;"	p	class:Body	access:public	signature:()
real_t	include/common.hh	12;"	d
rr	include/Body.hh	/^		double rr, g, b;$/;"	m	class:Body	access:public
set_r	include/Body.hh	/^		void set_r(real_t m_r){$/;"	f	class:Body	access:public	signature:(real_t m_r)
share_data	NBody_Parallel.cc	/^void NBody::share_data(){$/;"	f	class:NBody	signature:()
share_data	include/NBody.hh	/^		void share_data();$/;"	p	class:NBody	access:private	signature:()
show_init	Gui.cc	/^void show_init() {$/;"	f	signature:()
show_init	include/Gui.hh	/^void show_init();$/;"	p	signature:()
sqr	include/common.hh	/^		real_t sqr() const {$/;"	f	class:Vec	access:public	signature:() const
ssleep	common.cc	/^void ssleep(double t){$/;"	f	signature:(double t)
ssleep	include/common.hh	/^void ssleep(double t);$/;"	p	signature:(double t)
step	NBody.cc	/^void NBody::step(){$/;"	f	class:NBody	signature:()
step	include/NBody.hh	/^		void step();$/;"	p	class:NBody	access:public	signature:()
thread_do	NBody_Parallel.cc	/^void NBody::thread_do(long myid){$/;"	f	class:NBody	signature:(long myid)
thread_do	include/NBody.hh	/^		void thread_do(long myid);$/;"	p	class:NBody	access:public	signature:(long myid)
thread_do_caller	NBody_Parallel.cc	/^void* thread_do_caller(void* intptr){$/;"	f	signature:(void* intptr)
thread_do_caller	include/NBody.hh	/^void* thread_do_caller(void* intptr);$/;"	p	signature:(void* intptr)
time_step	main.cc	/^real_t time_step = 0.004;$/;"	v
tooclose	Body.cc	/^bool tooclose(const Body &b1, const Body &b2){$/;"	f	signature:(const Body &b1, const Body &b2)
tooclose	include/Body.hh	/^bool tooclose(const Body &b1, const Body &b2);$/;"	p	signature:(const Body &b1, const Body &b2)
v	include/Body.hh	/^		Vec pos, v;$/;"	m	class:Body	access:public
vel_change	NBody.cc	/^void NBody::vel_change(int target){$/;"	f	class:NBody	signature:(int target)
vel_change	include/NBody.hh	/^		void vel_change(int target);$/;"	p	class:NBody	access:private	signature:(int target)
wall	main.cc	/^	 wall = true;$/;"	v
world	main.cc	/^NBody world;$/;"	v
x	include/common.hh	/^		real_t x,y;$/;"	m	class:Vec	access:public
y	include/common.hh	/^		real_t x,y;$/;"	m	class:Vec	access:public
~NBody	include/NBody.hh	/^		~NBody(){};$/;"	f	class:NBody	access:public	signature:()
